Build started 2014/8/3 17:14:00.
     1>Project "H:\Source\iRobot-github\tools\luaDebug Plugins NotePad++\LuaDebug\LuaDebug\LuaDebug.vcxproj" on node 2 (Build target(s)).
     1>ClCompile:
         C:\Program Files\Microsoft Visual Studio 11.0\VC\bin\CL.exe /c /IH:\Source\boost_1_55_0 /ZI /nologo /W3 /WX- /Od /Oy- /D WIN32 /D _DEBUG /D _WINDOWS /D _USRDLL /D LUADEBUG_EXPORTS /D _SCL_SECURE_NO_WARNING /D _WINDLL /D _UNICODE /D UNICODE /Gm /EHsc /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Fo"Debug\\" /Fd"Debug\vc110.pdb" /Gd /TP /analyze- /errorReport:prompt ..\..\mobdebug.cpp
         mobdebug.cpp
         Please define _WIN32_WINNT or _WIN32_WINDOWS appropriately. For example:
         - add -D_WIN32_WINNT=0x0501 to the compiler command line; or
         - add _WIN32_WINNT=0x0501 to your project's Preprocessor Definitions.
         Assuming _WIN32_WINNT=0x0501 (i.e. Windows XP target).
     1>h:\source\boost_1_55_0\boost\format\alt_sstream_impl.hpp : warning C4819: The file contains a character that cannot be represented in the current code page (936). Save the file in Unicode format to prevent data loss
     1>h:\source\irobot-github\tools\luadebug plugins notepad++\mobdebug.cpp(90): warning C4996: 'fopen': This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
                 c:\program files\microsoft visual studio 11.0\vc\include\stdio.h(218) : see declaration of 'fopen'
     1>h:\source\irobot-github\tools\luadebug plugins notepad++\mobdebug.cpp(134): warning C4129: 's' : unrecognized character escape sequence
     1>c:\program files\microsoft visual studio 11.0\vc\include\xutility(2761): warning C4996: 'std::_Fill_n': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\program files\microsoft visual studio 11.0\vc\include\xutility(2747) : see declaration of 'std::_Fill_n'
                 h:\source\boost_1_55_0\boost\xpressive\detail\utility\sequence_stack.hpp(235) : see reference to function template instantiation '_OutIt std::fill_n<T*,size_t,T>(_OutIt,_Diff,const _Ty &)' being compiled
                 with
                 [
                     _OutIt=boost::xpressive::detail::sub_match_impl<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>> *,
                     T=boost::xpressive::detail::sub_match_impl<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>>,
                     _Diff=size_t,
                     _Ty=boost::xpressive::detail::sub_match_impl<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>>
                 ]
                 h:\source\boost_1_55_0\boost\xpressive\detail\utility\sequence_stack.hpp(233) : while compiling class template member function 'boost::xpressive::detail::sub_match_impl<BidiIter> *boost::xpressive::detail::sequence_stack<T>::push_sequence(size_t,const T &,boost::xpressive::detail::fill_t)'
                 with
                 [
                     BidiIter=std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,
                     T=boost::xpressive::detail::sub_match_impl<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>>
                 ]
                 h:\source\boost_1_55_0\boost\xpressive\detail\core\state.hpp(292) : see reference to function template instantiation 'boost::xpressive::detail::sub_match_impl<BidiIter> *boost::xpressive::detail::sequence_stack<T>::push_sequence(size_t,const T &,boost::xpressive::detail::fill_t)' being compiled
                 with
                 [
                     BidiIter=std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,
                     T=boost::xpressive::detail::sub_match_impl<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>>
                 ]
                 h:\source\boost_1_55_0\boost\xpressive\match_results.hpp(96) : see reference to class template instantiation 'boost::xpressive::detail::sequence_stack<T>' being compiled
                 with
                 [
                     T=boost::xpressive::detail::sub_match_impl<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>>
                 ]
                 h:\source\boost_1_55_0\boost\smart_ptr\intrusive_ptr.hpp(97) : see reference to class template instantiation 'boost::xpressive::detail::results_extras<BidiIter>' being compiled
                 with
                 [
                     BidiIter=std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>
                 ]
                 h:\source\boost_1_55_0\boost\smart_ptr\intrusive_ptr.hpp(96) : while compiling class template member function 'boost::intrusive_ptr<T>::~intrusive_ptr(void)'
                 with
                 [
                     T=boost::xpressive::detail::results_extras<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>>
                 ]
                 h:\source\boost_1_55_0\boost\xpressive\match_results.hpp(388) : see reference to function template instantiation 'boost::intrusive_ptr<T>::~intrusive_ptr(void)' being compiled
                 with
                 [
                     T=boost::xpressive::detail::results_extras<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>>
                 ]
                 h:\source\boost_1_55_0\boost\xpressive\match_results.hpp(1346) : see reference to class template instantiation 'boost::intrusive_ptr<T>' being compiled
                 with
                 [
                     T=boost::xpressive::detail::results_extras<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>>
                 ]
                 h:\source\irobot-github\tools\luadebug plugins notepad++\mobdebug.cpp(139) : see reference to class template instantiation 'boost::xpressive::match_results<BidiIter>' being compiled
                 with
                 [
                     BidiIter=std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>
                 ]
                 c:\program files\microsoft visual studio 11.0\vc\include\xutility(2747) : see declaration of 'std::_Fill_n'
     1>c:\program files\microsoft visual studio 11.0\vc\include\xutility(2176): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\program files\microsoft visual studio 11.0\vc\include\xutility(2157) : see declaration of 'std::_Copy_impl'
                 h:\source\boost_1_55_0\boost\xpressive\detail\core\sub_match_vector.hpp(162) : see reference to function template instantiation '_OutIt std::copy<boost::xpressive::detail::sub_match_impl<BidiIter>*,boost::xpressive::detail::sub_match_impl<BidiIter>*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=boost::xpressive::detail::sub_match_impl<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>> *,
                     BidiIter=std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,
                     _InIt=boost::xpressive::detail::sub_match_impl<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>> *
                 ]
                 h:\source\boost_1_55_0\boost\xpressive\detail\core\sub_match_vector.hpp(158) : while compiling class template member function 'void boost::xpressive::detail::sub_match_vector<BidiIter>::init_(boost::xpressive::detail::sub_match_impl<BidiIter> *,boost::xpressive::detail::sub_match_vector<BidiIter>::size_type,const boost::xpressive::detail::sub_match_vector<BidiIter> &)'
                 with
                 [
                     BidiIter=std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>
                 ]
                 h:\source\boost_1_55_0\boost\xpressive\detail\core\access.hpp(68) : see reference to function template instantiation 'void boost::xpressive::detail::sub_match_vector<BidiIter>::init_(boost::xpressive::detail::sub_match_impl<BidiIter> *,boost::xpressive::detail::sub_match_vector<BidiIter>::size_type,const boost::xpressive::detail::sub_match_vector<BidiIter> &)' being compiled
                 with
                 [
                     BidiIter=std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>
                 ]
                 h:\source\boost_1_55_0\boost\xpressive\match_results.hpp(369) : see reference to class template instantiation 'boost::xpressive::detail::sub_match_vector<BidiIter>' being compiled
                 with
                 [
                     BidiIter=std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>
                 ]
     1>C:\Program Files\MSBuild\Microsoft.Cpp\v4.0\V110\Microsoft.CppBuild.targets(1137,5): warning MSB8012: TargetPath(H:\Source\iRobot-github\tools\luaDebug Plugins NotePad++\LuaDebug\Debug\LuaDebug.dll) does not match the Linker's OutputFile property value (C:\Program Files\Notepad++\plugins\LuaDebug.dll). This may cause your project to build incorrectly. To correct this, please make sure that $(OutDir), $(TargetName) and $(TargetExt) property values match the value specified in %(Link.OutputFile).
       Link:
         C:\Program Files\Microsoft Visual Studio 11.0\VC\bin\link.exe /ERRORREPORT:PROMPT /OUT:"C:\Program Files\Notepad++\plugins\LuaDebug.dll" /INCREMENTAL /NOLOGO /LIBPATH:H:\Source\boost_1_55_0\stage\lib shlwapi.lib comctl32.lib kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /DEBUG /PDB:"H:\Source\iRobot-github\tools\luaDebug Plugins NotePad++\LuaDebug\Debug\LuaDebug.pdb" /SUBSYSTEM:WINDOWS /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"H:\Source\iRobot-github\tools\luaDebug Plugins NotePad++\LuaDebug\Debug\LuaDebug.lib" /MACHINE:X86 /SAFESEH /DLL Debug\mobdebug.obj
         Debug\NppPluginDemo.obj
         Debug\PluginDefinition.obj
         Debug\utf8.obj
     1>mobdebug.obj : warning LNK4075: ignoring '/EDITANDCONTINUE' due to '/SAFESEH' specification
            Creating library H:\Source\iRobot-github\tools\luaDebug Plugins NotePad++\LuaDebug\Debug\LuaDebug.lib and object H:\Source\iRobot-github\tools\luaDebug Plugins NotePad++\LuaDebug\Debug\LuaDebug.exp
         LuaDebug.vcxproj -> H:\Source\iRobot-github\tools\luaDebug Plugins NotePad++\LuaDebug\Debug\LuaDebug.dll
     1>Done Building Project "H:\Source\iRobot-github\tools\luaDebug Plugins NotePad++\LuaDebug\LuaDebug\LuaDebug.vcxproj" (Build target(s)).

Build succeeded.

Time Elapsed 00:00:26.70
